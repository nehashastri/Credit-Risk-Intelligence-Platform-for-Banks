# GitHub Actions Workflow for Credit Risk Intelligence Platform
# Automated deployment to Streamlit Cloud

name: Deploy Credit Risk Intelligence Platform

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        # Add test commands here when tests are implemented
        echo "Tests will be implemented in future versions"
        # pytest tests/ --cov=utils/ --cov-report=xml
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        # Create a deployment-ready package
        mkdir -p deploy
        cp -r . deploy/
        cd deploy
        # Remove unnecessary files
        rm -rf .git .github tests __pycache__ .pytest_cache
        # Create a simple deployment script
        echo '#!/bin/bash' > deploy.sh
        echo 'streamlit run Home.py --server.port $PORT --server.address 0.0.0.0' >> deploy.sh
        chmod +x deploy.sh
    
    - name: Deploy to Streamlit Cloud
      env:
        STREAMLIT_CLOUD_DEPLOYMENT_URL: ${{ secrets.STREAMLIT_CLOUD_DEPLOYMENT_URL }}
        STREAMLIT_CLOUD_API_KEY: ${{ secrets.STREAMLIT_CLOUD_API_KEY }}
      run: |
        # This would integrate with Streamlit Cloud API
        # For now, we'll just prepare the deployment
        echo "Deployment package ready for Streamlit Cloud"
        echo "Manual deployment required - upload to Streamlit Cloud"
        echo "Repository URL: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/credit-risk-platform:latest
          ${{ secrets.DOCKER_USERNAME }}/credit-risk-platform:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üöÄ Credit Risk Intelligence Platform deployed"
        elif [ "${{ needs.deploy.result }}" == "failure" ]; then
          echo "‚ùå Deployment failed!"
          echo "üîç Check logs for details"
        else
          echo "‚è≥ Deployment status: ${{ needs.deploy.result }}"
        fi
